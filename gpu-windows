#!/bin/bash
set -eux

# Give the GPU and HID devices to the Windows VM using VFIO.

# shellcheck source=gpu-common.sh
source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/gpu-common.sh"

###################################################################################

HUGE_PAGE_SIZE=$(grep Hugepagesize /proc/meminfo | awk '{print $2}')
HUGE_PAGES_NEEDED=$((RAM * 1024 * 1024 / HUGE_PAGE_SIZE))
if [[ $(cat /proc/sys/vm/nr_hugepages) -lt $HUGE_PAGES_NEEDED ]]
then
	echo $HUGE_PAGES_NEEDED | sudo tee /proc/sys/vm/nr_hugepages
fi

if [[ $(cat /proc/sys/vm/nr_hugepages) -lt $HUGE_PAGES_NEEDED ]]
then
	echo "Allocated $(cat /proc/sys/vm/nr_hugepages) out of $HUGE_PAGES_NEEDED huge pages. Free more RAM or reboot to defragment RAM."
	exit 1
fi

# Start VM (if needed)
if [[ "$(sudo virsh list --all | awk -v "name=$WIN_VM" '($2==name) {print $3}')" != running ]]
then
	sudo virsh start "$WIN_VM"
	sleep 15
fi

# Stop X
if systemctl is-active "$DM"
then
	sudo systemctl stop "$DM"
	sleep 5
fi

# Unbind HDA subdevice
#echo 0000:05:00.1 | sudo tee /sys/bus/pci/drivers/snd_hda_intel/unbind
#sleep 1

# Unbind vtcon (vtcon0 is virtual)
if [[ -e /sys/class/vtconsole/vtcon1/bind ]]
then
	echo 0 | sudo tee /sys/class/vtconsole/vtcon1/bind
	sleep 1
fi

# Unbind EFI framebuffer
if [[ -e /sys/bus/platform/drivers/efi-framebuffer/efi-framebuffer.0 ]]
then
	echo efi-framebuffer.0 | sudo tee /sys/bus/platform/drivers/efi-framebuffer/unbind
fi

# lsmod | grep nvidia

# Disable the GPU
#if grep -v -x -e 0 -e 4294967295 /sys/bus/pci/devices/0000:05:00.0/enable
#then
#	echo 0 | sudo tee /sys/bus/pci/devices/0000:05:00.0/enable
#	sleep 5
#fi

# Unbind GPU HDMI audio from snd_hda_intel
if [[ -e /sys/bus/pci/drivers/snd_hda_intel/$PCI_ADDR.1 ]]
then
	echo $PCI_ADDR.1 | sudo tee /sys/bus/pci/drivers/snd_hda_intel/unbind
	sleep 1
fi

# lsmod | grep nvidia

rmmod_if_loaded nvidia_drm
#rmmod_if_loaded nvidia_modeset
#rmmod_if_loaded nvidia

# Check that nvidia_modeset is not in use
# Sometimes this fails for no apparent reason and the only solution is a reboot
if lsmod | grep nvidia_modeset
then
	lsmod | grep nvidia_modeset | grep '\b0$'
fi

# Finally, unbind GPU from NVIDIA driver
if [[ -e /sys/bus/pci/drivers/nvidia ]]
then
	echo $PCI_ADDR.0 | sudo tee /sys/bus/pci/drivers/nvidia/unbind
fi

# Unload the drivers
rmmod_if_loaded nvidia_drm
rmmod_if_loaded nvidia_modeset
rmmod_if_loaded nvidia

# Load VFIO meta-driver
sudo modprobe vfio-pci

# Assign devices to VFIO
echo "$gpu_vendor $gpu_device" | sudo tee /sys/bus/pci/drivers/vfio-pci/new_id
#echo 10de 0e1a | sudo tee /sys/bus/pci/drivers/vfio-pci/new_id

sleep 1

# Dump GPU
#virsh nodedev-dumpxml pci_0000_05_00_0 > gpu.xml

# Assign devices to VM
for D in "${host_devices[@]}"
do
	sudo virsh attach-device $WIN_VM "$HOME/.config/vfio/devices/$D.xml"
done
